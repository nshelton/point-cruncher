// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PointSampler
#pragma kernel Clear

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> _outputTexture;
StructuredBuffer<float3> _inputData;
float4x4 _pointsTransform;
float4x4 _volumeTransformInv;
int _gridSize;

[numthreads(128,1,1)]
void PointSampler (uint3 id : SV_DispatchThreadID)
{
	float4 p = float4(_inputData[id.x].xyz, 1.0);

	p = mul(_pointsTransform, p);
	p = mul(_volumeTransformInv, p);

	p += 0.5;

	int3 cell = ((p.xyz) * _gridSize);

	if (cell.x < 0 || 
		cell.z < 0 ||
		cell.x >= _gridSize ||
		cell.z >= _gridSize )
	{
		return;
	}
	
	for ( int i = cell.y; i > 0; i --)
	{
		if(cell.y < _gridSize)
		{
			cell.y = i;
			_outputTexture[cell] = _outputTexture[cell] + (float4)1.0;
		}	
	}
}

[numthreads(8, 8, 8)]
void Clear (uint3 id : SV_DispatchThreadID)
{
	_outputTexture[id] = 0;
}